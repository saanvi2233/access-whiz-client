import React from "react";
import { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import "../style/reports.css";
import jsPDF from 'jspdf';
import 'jspdf-autotable'; // Must be imported separately after jsPDF


function Reports() { 
    const [pastAnalyse, setPastAnalyse] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
  const [expandedExportIndex, setExpandedExportIndex] = useState(null);
    const navigate = useNavigate();


     const fetchPastAnalyses = async () => {
        try {
          const res = await axios.get('http://localhost:5000/analyze/all');
          setPastAnalyse(res.data);
        } catch (err) {
          console.error('Error fetching past analyses:', err);
        }
        finally{
            setIsLoading(false);
        }
      };

      useEffect(() => {
        setIsLoading(true);
        fetchPastAnalyses();
      }, []);

 const getSeverityCounts = (violations) => {
    return violations.reduce((acc, violation) => {
      acc[violation.impact] = (acc[violation.impact] || 0) + 1;
      return acc;
    }, {});
  };



      const handleCopyToClipboard = (report) => {
    navigator.clipboard.writeText(JSON.stringify(report, null, 2));
    alert("Copied to clipboard");
  };

   const handleExportCSV = (report) => {
    const headers = ["Issue", "Description", "Impact"];
    const rows = report.violations.map((issue) => [
      issue.help,
      issue.description,
      issue.impact,
    ]);

    const csvContent = [
      headers.join(","),
      ...rows.map((row) => row.map((value) => `"${value}"`).join(",")),
    ].join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const fileUrl = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = fileUrl;
    link.setAttribute("download", `report_${report._id}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };


  const handleExportPDF = (report) => {
  const doc = new jsPDF();

  doc.setProperties({
    title: `Accessibility Report - ${report._id}`,
    subject: 'Web Accessibility Analysis Report',
    author: 'Accessibility Scanner'
  });

  doc.setFontSize(18);
  doc.setFont("helvetica", "bold");
  doc.text("Accessibility Report", 14, 22);

  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  doc.text(`URL: ${report.url}`, 14, 32);
  doc.text(`Date: ${new Date(report.date).toLocaleDateString()}`, 14, 38);
  doc.text(`Total Issues: ${report.violations.length}`, 14, 44);

  // Prepare table data
  const headers = [["ID", "Description", "Impact", "Help"]];
  const data = report.violations.map((violation) => [
    violation.id,
    violation.description,
    violation.impact,
    violation.help
  ]);

  doc.autoTable({
    startY: 50,
    head: headers,
    body: data,
    theme: "grid",
    styles: {
      fontSize: 10,
      cellPadding: 3,
      valign: "middle",
    },
    headStyles: {
      fillColor: [41, 128, 185], // Blue
      textColor: 255,
      fontStyle: "bold"
    },
    columnStyles: {
      0: { cellWidth: 25 },  // ID
      1: { cellWidth: 75 },  // Description
      2: { cellWidth: 20 },  // Impact
      3: { cellWidth: 60 }   // Help
    },
    didDrawPage: (data) => {
      doc.setFontSize(10);
      doc.text(
        `Report generated by Accessibility Scanner - Page ${data.pageNumber}`,
        14,
        doc.internal.pageSize.height - 10
      );
    }
  });

  doc.save(`accessibility-report-${report._id}.pdf`);
};



  return (
    <div className="reports-page">
      <button className="back-button" onClick={() => navigate('/')}>
        ‚Üê Back to Dashboard
      </button>

      <header className="reports-header">
        <h1>Past Analysis Reports</h1>
        <p className="subtitle">Review and export your historical accessibility scans</p>
      </header>

      {isLoading ? (
        <div className="loading-indicator">
          <div className="spinner"></div>
          Loading reports...
        </div>
      ) : pastAnalyse.length > 0 ? (
        <div className="reports-grid">
          {pastAnalyse.map((report, index) => {
            const severityCounts = getSeverityCounts(report.violations);
            
            return (
              <div key={index} className="report-card">
                <div className="report-header">
                  <h3>{new URL(report.url).hostname}</h3>
                  {/* <span className="report-date">
                    {new Date(report.createdAt).toLocaleDateString()}
                  </span> */}
                </div>
                
                <div className="report-stats">
                  <div className="stat-item">
                    <span className="stat-value">{report.violations.length}</span>
                    <span className="stat-label">Total Issues</span>
                  </div>
                  <div className="severity-breakdown">
                    {Object.entries(severityCounts).map(([impact, count]) => (
                      <div key={impact} className="severity-item">
                        <span 
                          className="severity-dot" 
                          style={{ backgroundColor: getColor(impact) }}
                        ></span>
                        {count} {impact}
                      </div>
                    ))}
                  </div>
                </div>

               <div className="report-actions">
                <button
                  className="view-details-btn"
                  onClick={() => navigate(`/report/${report._id}`)}
                >
                  View Details
                </button>

                <div className="export-wrapper">
                  <button
                    className="export-btn"
                    onClick={(e) => {
                      e.stopPropagation();
                      setExpandedExportIndex(
                        expandedExportIndex === index ? null : index
                      );
                    }}
                  >
                    <span className="export-icon">‚ñº</span> Export
                  </button>

                  {expandedExportIndex === index && (
                    <div className="export-dropdown">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleExportCSV(report);
                          setExpandedExportIndex(null);
                        }}
                        className="dropdown-item"
                      >
                        <span className="csv-icon">üìÑ</span> CSV
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleExportPDF(report);
                          setExpandedExportIndex(null);
                        }}
                        className="dropdown-item"
                      >
                        <span className="pdf-icon">üìä</span> PDF
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleCopyToClipboard(report);
                          setExpandedExportIndex(null);
                        }}
                        className="dropdown-item"
                      >
                        <span className="clipboard-icon">üìã</span> Clipboard
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    ) : (
        <div className="no-reports">
          <p>No past analyses found. Run your first accessibility scan!</p>
        </div>
      )}
    </div>
  );
}


// / Reuse your existing color function or add to reports.css
const getColor = (impact) => {
  switch (impact) {
    case 'critical': return '#dc3545';
    case 'serious': return '#fd7e14';
    case 'moderate': return '#ffc107';
    default: return '#17a2b8';
  }
};

export default Reports;